package com.javatechig.gridviewexample;import android.content.Intent;import android.os.AsyncTask;import android.support.v7.app.ActionBarActivity;import android.os.Bundle;import android.util.Log;import android.widget.ImageView;import android.widget.TextView;//import android.widget.Toast;import com.squareup.picasso.Picasso;import org.apache.http.HttpResponse;import org.apache.http.client.HttpClient;import org.apache.http.client.methods.HttpGet;import org.apache.http.impl.client.DefaultHttpClient;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.util.ArrayList;public class DetailView extends ActionBarActivity {    private Car cardata;    private String FEED_URL;    static class Car {        String carReg;        String carMake;        String carModel;        String carYear;        ArrayList<String> carImage;    }    ImageView carImageView;    TextView carRegLabel;    TextView carMakeLabel;    TextView carModelLabel;    TextView carYearLabel;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_detail_view);        Intent intent = getIntent();        String id = intent.getStringExtra("key");        Log.w("CarID",id);        carImageView = (ImageView)findViewById(R.id.imageView);        carRegLabel = (TextView)findViewById(R.id.carRegLabel);        carMakeLabel = (TextView)findViewById(R.id.carMakeLabel);        carModelLabel = (TextView)findViewById(R.id.carModelLabel);        carYearLabel = (TextView)findViewById(R.id.carYearLabel);        FEED_URL =  "http://collegboi.me/vehicleCheck/returnCar.php?carID="+id;        new AsyncGetCarData().execute(FEED_URL);    }    //Downloading data asynchronously    public class AsyncGetCarData extends AsyncTask<String, Void, Integer> {        @Override        protected Integer doInBackground(String... params) {            Integer result = 0;            try {                // Create Apache HttpClient                HttpClient httpclient = new DefaultHttpClient();                HttpResponse httpResponse = httpclient.execute(new HttpGet(params[0]));                int statusCode = httpResponse.getStatusLine().getStatusCode();                Log.w("Test", "" + statusCode);                // 200 represents HTTP OK                if (statusCode == 200) {                    String response = streamToString(httpResponse.getEntity().getContent());                    parseResult(response);                    result = 1; // Successful                } else {                    result = 0; //"Failed                }//                String response = streamToString(httpResponse.getEntity().getContent());//                parseResult(response);//                result = 1;            } catch (Exception e) {               // Log.d(TAG, e.getLocalizedMessage());            }            //result = 1;            return result;        }        @Override        protected void onPostExecute(Integer result) {            /* Download complete. Lets update UI *///            Log.w("Result",""+result);            //if (result == 1) {            setTitle(cardata.carReg);                carRegLabel.setText(cardata.carReg);                carMakeLabel.setText(cardata.carMake);                carModelLabel.setText(cardata.carModel);                carYearLabel.setText(cardata.carYear);                Picasso.with(DetailView.this).load(cardata.carImage.get(0)).into(carImageView);//            } else {//                Toast.makeText(DetailView.this, "Failed to fetch data!", Toast.LENGTH_SHORT).show();//            }            //Hide progressbar            //mProgressBar.setVisibility(View.GONE);        }    }    String streamToString(InputStream stream) throws IOException {        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(stream));        String line;        String result = "";        while ((line = bufferedReader.readLine()) != null) {            result += line;        }//         Close stream//        if (null != stream) {//            stream.close();//        }        return result;    }    /**     * Parsing the feed results and get the list     *     * @param result     */    private void parseResult(String result) {        try {            JSONObject reader = new JSONObject(result);            JSONArray jsonArray = reader.getJSONArray("Car");            //GridItem item;            //for (int i = 0; i < jsonArray.length(); i++)            JSONObject post = jsonArray.optJSONObject(0);            String title = post.optString("carReg");            String carMake = post.optString("carMake");            String carModel = post.optString("carModel");            String carYear = post.optString("carYear");           JSONArray jsonImageArray = post.getJSONArray("carPhoto");            ArrayList<String> arrayList = new ArrayList<>();            cardata = new Car();            cardata.carReg = title;            cardata.carModel = carModel;            cardata.carMake = carMake;            cardata.carYear = carYear;            for(int i = 0; i < jsonImageArray.length(); i++) {                String image = jsonImageArray.getString(i);                //Log.w("Image",image);                arrayList.add(image);            }            cardata.carImage = arrayList;               // mGridData.add(item);           // }        } catch (JSONException e) {            e.printStackTrace();        }    }}